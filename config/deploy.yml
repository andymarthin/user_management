# Name of your application. Used to uniquely configure containers.
service: user-management

# Name of the container image.
image: marthin/user_management

# Deploy to these servers.
servers:
  web:
    hosts:
      - 206.189.158.127
    labels:
      traefik.http.routers.marthin.rule: Host(`kamal5.marthin.web.id`)
      traefik.http.routers.marthin_secure.entrypoints: websecure
      traefik.http.routers.marthin_secure.rule: Host(`kamal5.marthin.web.id`)
      traefik.http.routers.marthin_secure.tls: true
      traefik.http.routers.marthin_secure.tls.certresolver: letsencrypt
    options:
      network: "private"
# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  server: registry.digitalocean.com
  username:
    - KAMAL_REGISTRY_PASSWORD

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
   clear:
      DB_HOST: user-management-db
      HOSTNAME: kamal4.marthin.web.id
      RAILS_SERVE_STATIC_FILES: true
      RAILS_LOG_TO_STDOUT: true
   secret:
     - RAILS_MASTER_KEY
     - POSTGRES_PASSWORD

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Configure custom arguments for Traefik. Be sure to reboot traefik when you modify it.
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/etc/letsencrypt/acme.json:/etc/letsencrypt/acme.json"
    network: "private"
  labels:
    traefik.enable: true
    traefik.http.routers.api.service: api@internal
    traefik.http.routers.api.entrypoints: websecure
    traefik.http.routers.api.rule: Host(`traefik2.marthin.web.id`)
    traefik.http.routers.api.tls: true
    traefik.http.routers.api.middlewares: auth
    traefik.http.middlewares.auth.basicauth.users: "admin:$apr1$grDv5EbV$LMK0GhPLtvxyl3A8jASqO/"
  args:
    api.insecure: false
    api.dashboard: true
    entryPoints.web.address: ":80"
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entryPoint.permanent: true
    entryPoints.websecure.address: ":443"
    certificatesResolvers.letsencrypt.acme.email: "mail@marthin.web.id"
    certificatesResolvers.letsencrypt.acme.storage: "/etc/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: "web"

accessories:
  db:
    image: postgres:15
    roles:
      - web
    port: 5432
    env:
      clear:
        POSTGRES_USER: "user_management"
        POSTGRES_DB: 'user_management_production'
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
    options:
      network: "private"

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /up
  port: 3000
  max_attempts: 10


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
